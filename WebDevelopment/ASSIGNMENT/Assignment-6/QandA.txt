Q.1 What’s Constructor And Its Purpose?
Ans: In JavaScript ES6 (ECMAScript 2015) and later versions, the concept of constructors remains the same, but there is a new syntax called "class syntax" that provides a more convenient way to define constructors and create objects.

In ES6, a constructor is a special method defined within a class that is used to create and initialize objects of that class. The purpose of a constructor remains the same as in previous versions of JavaScript: to set the initial state (properties or variables) of an object.

Here's an example of a constructor using the class syntax in JavaScript ES6:

```javascript
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
}

// Creating a new instance of Person using the constructor
const person1 = new Person("John", 25);
```

In the above example, `Person` is a class that has a constructor method defined using the `constructor` keyword. The constructor takes two parameters (`name` and `age`) and assigns them to the respective properties of the object being created (`this.name` and `this.age`). The `new` keyword is used to invoke the constructor and create a new object (`person1`) with the specified properties.

Similar to the previous version, you can also define methods within the class, which will be shared among all instances of the class using the class prototype.

Using the class syntax in ES6 provides a more readable and structured way to define constructors and work with object-oriented programming concepts in JavaScript. However, it's important to note that under the hood, JavaScript's class syntax is still based on prototypes and functions, and constructors are essentially special functions that create and initialize objects.

Q.2 Explain This Keyword and Its Purpose?
Ans: In JavaScript, the `this` keyword is a special keyword that refers to the context in which a function is executed or an object is accessed. The specific value of `this` depends on how and where the function is invoked.

The purpose of the `this` keyword is to provide a way to access and refer to the current object or context within a function or method. It allows you to access properties and methods of the object that is currently being operated on.

The value of `this` is determined by the way a function is called. Here are some common scenarios:

1. Global scope: When `this` is used in the global scope (outside any function), it refers to the global object, which is `window` in a browser environment or `global` in Node.js.

2. Object method: When a function is called as a method of an object, `this` refers to the object itself. It allows you to access and manipulate the object's properties and methods.

```javascript
const myObject = {
  property: "value",
  method: function() {
    console.log(this.property); // accessing the property of the object
  }
};

myObject.method(); // prints "value"
```

3. Constructor function: When a constructor function is used to create new objects using the `new` keyword, `this` refers to the newly created object. It allows you to set the initial state of the object by assigning values to its properties.

```javascript
function Person(name) {
  this.name = name;
}

const person1 = new Person("John");
console.log(person1.name); // prints "John"
```

4. Event handlers: When a function is used as an event handler, `this` refers to the element on which the event occurred. It allows you to manipulate the element or access its properties and attributes.

```javascript
document.querySelector("#myButton").addEventListener("click", function() {
  console.log(this); // refers to the clicked button element
});
```

It's important to note that the value of `this` is not lexically scoped (bound to the function's scope) like regular variables. Instead, it is dynamically determined at runtime based on how the function is called.

Understanding and correctly using the `this` keyword is crucial in JavaScript, as it allows you to access and manipulate the current context and work with objects and functions effectively.

Q.3 What’s Call Apply Bind Method & Difference Between them.
Ans: In JavaScript, `call`, `apply`, and `bind` are methods that allow you to control the invocation of a function and explicitly set the value of `this` within the function. These methods are commonly used to borrow functions, set the context of a function, and create new functions with a specific `this` value. 

1. `call`: The `call` method invokes a function with a specified `this` value and arguments passed individually. The syntax is as follows:

```javascript
functionName.call(thisValue, arg1, arg2, ...);
```

The `thisValue` parameter is the value that will be used as `this` within the function, and the subsequent arguments are the individual arguments to be passed to the function.

Example:

```javascript
function sayHello() {
  console.log(`Hello, ${this.name}!`);
}

const person = { name: "John" };

sayHello.call(person); // Output: Hello, John!
```

In this example, `call` is used to invoke the `sayHello` function with `person` as the `this` value, allowing access to the `name` property within the function.

2. `apply`: The `apply` method is similar to `call`, but it accepts the arguments as an array or an array-like object. The syntax is as follows:

```javascript
functionName.apply(thisValue, [arg1, arg2, ...]);
```

Example:

```javascript
function sayHello(greeting) {
  console.log(`${greeting}, ${this.name}!`);
}

const person = { name: "John" };
const args = ["Good morning"];

sayHello.apply(person, args); // Output: Good morning, John!
```

In this example, `apply` is used to invoke the `sayHello` function with `person` as the `this` value and the `args` array as the arguments to the function.

The difference between `call` and `apply` lies in how the arguments are passed. With `call`, arguments are passed individually, whereas with `apply`, they are passed as an array.

3. `bind`: The `bind` method creates a new function with a specified `this` value, which can be invoked later. The original function is not executed immediately when `bind` is called. The syntax is as follows:

```javascript
const newFunction = functionName.bind(thisValue);
```

Example:

```javascript
function sayHello() {
  console.log(`Hello, ${this.name}!`);
}

const person = { name: "John" };
const greet = sayHello.bind(person);

greet(); // Output: Hello, John!
```

In this example, `bind` is used to create a new function `greet` that is permanently bound to `person` as the `this` value. When `greet` is invoked, it will always have `person` as its `this` value, regardless of how or where it is called.

To summarize:
- `call` and `apply` are used to invoke a function immediately with a specified `this` value, where `call` accepts individual arguments and `apply` accepts arguments as an array.
- `bind` is used to create a new function with a specified `this` value, which can be invoked later.

These methods give you control over the execution context and provide flexibility in managing `this` within functions.

Q.4 Explain OOPS ? 
Ans: OOPS (Object-Oriented Programming) is a programming paradigm that organizes code by modeling real-world objects as software objects. It provides a way to structure code and data together, allowing for more modular, reusable, and maintainable code. JavaScript supports object-oriented programming, and while it is a multi-paradigm language, it can be used effectively in an object-oriented manner.

Here are some key concepts of OOPS in JavaScript:

1. Objects: In OOPS, objects are the fundamental building blocks. An object is an instance of a class that encapsulates data (properties) and behavior (methods). In JavaScript, objects can be created using object literals, constructor functions, or the class syntax introduced in ES6.

2. Classes: A class is a blueprint or template for creating objects. It defines the structure and behavior of objects. In JavaScript, classes can be defined using constructor functions or the class syntax.

3. Encapsulation: Encapsulation is the process of bundling data and methods together within a class. It allows you to control access to the internal state of an object and provides a way to enforce data integrity and hide implementation details.

4. Inheritance: Inheritance is a mechanism that allows objects to inherit properties and methods from a parent class or object. It promotes code reuse and hierarchical organization of classes. JavaScript uses prototypal inheritance, where objects can inherit properties and methods from prototype objects.

5. Polymorphism: Polymorphism allows objects of different types to be treated as instances of a common superclass. It enables code to be written that can work with objects of multiple types, providing flexibility and extensibility.

6. Abstraction: Abstraction involves simplifying complex systems by representing only the essential features and hiding unnecessary details. It allows you to create abstract classes or interfaces that define the contract for subclasses or implementing objects.

7. Modularity: Modularity is the concept of breaking down code into smaller, self-contained modules. It promotes code organization, reusability, and maintainability. JavaScript supports modularity through modules, which can be defined using different module systems such as CommonJS or ES Modules.

By applying these concepts, object-oriented programming in JavaScript allows you to create well-structured, reusable, and scalable code. It helps in managing complexity, promotes code organization, and enhances code maintenance and collaboration.


Q.5 Whats Abstraction and Its Purpose?
Ans: Abstraction is a concept in programming that involves simplifying complex systems by representing only the essential features and hiding unnecessary details. It allows you to focus on the essential aspects of an object or system while hiding the implementation details from the outside world. Abstraction helps in managing complexity, improving code readability, and promoting code maintainability.

In JavaScript ES6, abstraction can be achieved through various mechanisms, including classes, modules, and interfaces.

1. Classes: ES6 introduced the class syntax, which provides a way to create objects and define their structure and behavior. Classes encapsulate data (properties) and behavior (methods) into a single entity, hiding the internal implementation details. This promotes abstraction by allowing you to work with objects based on their public interface without concerning yourself with how they are implemented internally.

Example:

```javascript
class Animal {
  constructor(name) {
    this.name = name;
  }
  
  makeSound() {
    // Implementation details are hidden
    throw new Error("makeSound() method must be implemented.");
  }
}

class Dog extends Animal {
  makeSound() {
    console.log("Woof!");
  }
}

const dog = new Dog("Buddy");
dog.makeSound(); // Output: Woof!
```

In the above example, the `Animal` class defines the public interface with the `makeSound()` method, which must be implemented by derived classes. The `Dog` class inherits from `Animal` and provides its own implementation of `makeSound()`. The internal implementation details of the `Animal` class are hidden, and we can work with objects based on their abstract behavior.

2. Modules: ES6 modules allow you to split your code into multiple files, each focusing on a specific functionality or feature. Modules provide a way to abstract and encapsulate code, making it easier to manage and reuse. By exporting only the necessary functions, classes, or variables and importing them where needed, you abstract away the implementation details and expose a simplified, abstract interface to other parts of your code.

Example:

```javascript
// file: math.js
export function add(a, b) {
  return a + b;
}

export function subtract(a, b) {
  return a - b;
}

// file: main.js
import { add } from "./math.js";

const result = add(5, 3);
console.log(result); // Output: 8
```

In the above example, the `math.js` module exports the `add` and `subtract` functions, abstracting away their implementation details. In the `main.js` file, we import the `add` function and use it without being concerned about the specific implementation.

The purpose of abstraction is to simplify complex systems, promote code reusability, and manage complexity by exposing only the essential aspects while hiding unnecessary details. It allows you to work at a higher level of abstraction and focus on the behavior and functionality rather than getting bogged down in the specific implementation details. This leads to more maintainable, modular, and readable code.

Q.6 Whats Polymorphism and Purpose of it? 
Ans: Polymorphism is a concept in object-oriented programming that allows objects of different types to be treated as instances of a common superclass or interface. It enables code to be written that can work with objects of multiple types, providing flexibility and extensibility.

The purpose of polymorphism is to write code that can operate on objects based on their shared interface or behavior, rather than their specific types. This promotes code reusability, flexibility, and extensibility by allowing new classes to be added that conform to the common interface without modifying the existing code.

In JavaScript, polymorphism is achieved through the dynamic nature of the language, which does not have strict type-checking at compile-time. Instead, JavaScript uses duck typing, where the suitability of an object for a particular behavior is determined based on its available methods and properties rather than its explicit type.

Here's an example to illustrate polymorphism in JavaScript:

```javascript
class Shape {
  area() {
    // Placeholder implementation
  }
}

class Rectangle extends Shape {
  constructor(width, height) {
    super();
    this.width = width;
    this.height = height;
  }

  area() {
    return this.width * this.height;
  }
}

class Circle extends Shape {
  constructor(radius) {
    super();
    this.radius = radius;
  }

  area() {
    return Math.PI * Math.pow(this.radius, 2);
  }
}

// Polymorphic behavior
const rectangle = new Rectangle(5, 10);
const circle = new Circle(3);

function printArea(shape) {
  console.log("Area:", shape.area());
}

printArea(rectangle); // Output: Area: 50
printArea(circle); // Output: Area: 28.274333882308138
```

In the above example, we have a base class `Shape` with an `area()` method that serves as a common interface. The derived classes `Rectangle` and `Circle` inherit from `Shape` and provide their own implementations of `area()`. Despite being different classes, both `Rectangle` and `Circle` objects can be treated as instances of the `Shape` class when passed to the `printArea()` function.

The `printArea()` function demonstrates polymorphism by accepting objects of different types that conform to the `Shape` interface. It calls the `area()` method on each object, and the appropriate implementation is executed based on the actual type of the object.

The purpose of polymorphism is to write code that is generic and can work with objects of different types that share a common interface or behavior. This promotes code reuse and extensibility by allowing new classes to be added that conform to the common interface without modifying the existing code. It provides flexibility in designing and evolving software systems by enabling different objects to be used interchangeably based on their shared behavior rather than their specific types.

Q.7  Whats Inheritance and Purpose of it?
Ans: Inheritance is a fundamental concept in object-oriented programming that allows objects to acquire properties and methods from a parent class or prototype. It enables code reuse, promotes code organization, and provides a way to model real-world relationships between objects.

In JavaScript, inheritance is implemented through prototype-based inheritance. Objects can inherit properties and methods from prototype objects, which serve as their parent objects. JavaScript uses a prototype chain to look up properties and methods from the object's prototype and its parent prototypes.

The purpose of inheritance is to promote code reuse and create a hierarchical relationship between classes or objects. It allows you to define a base class or prototype with common properties and behaviors and derive new classes or objects from it, inheriting and extending its functionality.

Here's an example to illustrate inheritance in JavaScript:

```javascript
// Parent class or prototype
class Animal {
  constructor(name) {
    this.name = name;
  }

  eat() {
    console.log(`${this.name} is eating.`);
  }
}

// Derived class
class Dog extends Animal {
  bark() {
    console.log(`${this.name} is barking.`);
  }
}

// Creating instances
const animal = new Animal("Animal");
const dog = new Dog("Buddy");

animal.eat(); // Output: Animal is eating.
dog.eat(); // Output: Buddy is eating.
dog.bark(); // Output: Buddy is barking.
```

In the above example, we have a parent class `Animal` that defines a constructor and a method `eat()`. The `Dog` class extends `Animal` using the `extends` keyword, which establishes an inheritance relationship. The `Dog` class introduces a new method `bark()`.

When we create instances of `Animal` and `Dog`, both instances inherit the `eat()` method from the `Animal` class. The `Dog` instance also has access to its own `bark()` method. In this way, `Dog` inherits the properties and methods of `Animal` and extends it with its own specific behavior.

The purpose of inheritance is to promote code reuse, reduce redundancy, and create a logical relationship between classes or objects. It allows you to define common functionality in a parent class or prototype and have it automatically available in derived classes or objects. This simplifies code organization, improves maintainability, and provides a way to model real-world object relationships, where specific objects inherit characteristics from more general ones.

By utilizing inheritance, you can build upon existing code and create a hierarchy of classes or objects, allowing for modular and extensible software development.

Q.8 Whats Encapsulation and Purpose of it ?
Ans: Encapsulation is a fundamental principle in object-oriented programming that bundles data and methods together within a class or object, hiding the internal implementation details from the outside world. It promotes data integrity, code organization, and information hiding.

In JavaScript, encapsulation can be achieved through various techniques, including the use of classes, closure, and object literals.

The purpose of encapsulation is to provide a way to control access to the internal state of an object and to ensure that data is accessed and modified in a controlled manner. It helps to prevent external code from directly manipulating the internal data of an object, reducing the chances of unintended modifications or invalid states.

Here's an example to illustrate encapsulation in JavaScript:

```javascript
class BankAccount {
  constructor(accountNumber) {
    this.accountNumber = accountNumber;
    this.balance = 0;
  }

  deposit(amount) {
    this.balance += amount;
    console.log(`Deposit of ${amount} successful. New balance: ${this.balance}`);
  }

  withdraw(amount) {
    if (amount <= this.balance) {
      this.balance -= amount;
      console.log(`Withdrawal of ${amount} successful. New balance: ${this.balance}`);
    } else {
      console.log("Insufficient funds.");
    }
  }
}

const account = new BankAccount("1234567890");
account.deposit(1000); // Output: Deposit of 1000 successful. New balance: 1000
account.withdraw(500); // Output: Withdrawal of 500 successful. New balance: 500
```

In the above example, we have a `BankAccount` class that encapsulates the account number and balance as properties. The methods `deposit` and `withdraw` provide controlled access to modify the balance. The internal state of the object (account number and balance) is hidden from the outside world, preventing direct manipulation of the data.

Encapsulation helps in achieving several purposes:

1. Data Protection: By encapsulating data within a class or object, you can control access to the data and ensure that it is modified only through defined methods. This helps maintain data integrity and prevent unwanted modifications.

2. Information Hiding: Encapsulation allows you to hide the internal implementation details of an object, exposing only a well-defined interface or public methods to the outside world. This provides a clear separation between the implementation and the usage, promoting code maintainability and reducing dependencies.

3. Code Organization: Encapsulation promotes better code organization by grouping related data and methods together within a class or object. It improves code readability, modularity, and reusability.

4. Abstraction: Encapsulation helps in abstracting away the complexity of an object by providing a simplified interface to interact with. Users of the object do not need to be concerned with the internal details, but can instead focus on using the object's public methods and properties.

Overall, encapsulation allows you to control access to data, hide implementation details, and organize code effectively. It provides a way to create robust, maintainable, and reusable code by defining well-structured objects with clear boundaries and encapsulated behavior.

Q.9 Explain Class in JavaScript?
Ans: In JavaScript, a class is a blueprint or template for creating objects that share the same structure and behavior. It provides a way to define and create objects with similar properties and methods. The introduction of the class syntax in ECMAScript 2015 (ES6) made it easier and more intuitive to work with classes in JavaScript.

Here are some key points to understand about classes in JavaScript:

1. Class Declaration: To declare a class, you use the `class` keyword followed by the name of the class. Inside the class body, you define the properties and methods of the class.

Syntax:

```javascript
class ClassName {
  // properties and methods
}
```

2. Constructor: The `constructor` method is a special method that is called when creating an instance of the class. It is used to initialize the object's properties and set up its initial state. The `constructor` method is optional, but if defined, it is automatically called when creating objects from the class.

Syntax:

```javascript
class ClassName {
  constructor(parameters) {
    // initialization code
  }
}
```

3. Properties: Properties are the variables or data associated with the class. They define the state or characteristics of the objects created from the class. Properties are declared inside the class body and can be accessed and modified using the object instances.

Syntax:

```javascript
class ClassName {
  constructor() {
    this.propertyName = value;
  }
}
```

4. Methods: Methods are the functions associated with the class that define its behavior. They can be accessed and invoked on the object instances created from the class. Methods are declared inside the class body, and they can access the class's properties using the `this` keyword.

Syntax:

```javascript
class ClassName {
  methodName() {
    // method code
  }
}
```

5. Creating Instances: To create an object instance from a class, you use the `new` keyword followed by the class name and any necessary arguments for the constructor.

Syntax:

```javascript
const objectInstance = new ClassName(arguments);
```

Here's an example that demonstrates the usage of a class in JavaScript:

```javascript
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  greet() {
    console.log(`Hello, my name is ${this.name} and I'm ${this.age} years old.`);
  }
}

const john = new Person("John", 25);
john.greet(); // Output: Hello, my name is John and I'm 25 years old.
```

In the example above, we define a `Person` class with a `constructor` method that initializes the `name` and `age` properties of the object. The `Person` class also has a `greet` method that outputs a greeting message using the object's properties.

We then create an instance of the `Person` class called `john` using the `new` keyword and pass the necessary arguments to the constructor. We can access and invoke the `greet` method on the `john` object instance.

Classes in JavaScript provide a way to organize code, define reusable structures, and create objects with shared properties and behaviors. They are a powerful tool for creating and working with objects in an object-oriented manner.

Q.10 What’s Super Keyword & What it does?
Ans: In JavaScript, the `super` keyword is used to call and access the parent class's properties and methods from within a subclass. It is particularly useful when you want to override a method in the subclass but still need to access the parent class's implementation.

Here's an example that demonstrates the usage of the `super` keyword:

```javascript
class Animal {
  constructor(name) {
    this.name = name;
  }

  makeSound() {
    console.log("Animal makes a sound");
  }
}

class Dog extends Animal {
  constructor(name, breed) {
    super(name); // Calling the parent class's constructor
    this.breed = breed;
  }

  makeSound() {
    super.makeSound(); // Calling the parent class's makeSound method
    console.log("Dog barks");
  }
}

const dog = new Dog("Buddy", "Labrador");
dog.makeSound();
```

In the above example, we have a parent class `Animal` and a subclass `Dog` that extends the `Animal` class.

The `Animal` class has a constructor that takes a `name` parameter and sets it as an instance variable. It also has a `makeSound` method that outputs a generic sound.

The `Dog` class extends `Animal` and introduces a new property `breed`. In the `Dog` constructor, the `super(name)` call is used to invoke the constructor of the parent class and pass the `name` argument to it. This ensures that the `name` property of the `Animal` class is properly initialized.

The `Dog` class also overrides the `makeSound` method. Inside the `makeSound` method of the `Dog` class, `super.makeSound()` is used to call the `makeSound` method of the parent class. This allows the subclass to access and invoke the parent class's implementation before adding its own behavior.

When we create an instance of the `Dog` class and call the `makeSound` method, it outputs both the parent class's sound (`Animal makes a sound`) and the subclass-specific sound (`Dog barks`).

Using the `super` keyword in this way allows subclasses to extend and modify the behavior of the parent class while still leveraging and building upon the parent class's functionality.